using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.ML;
using Microsoft.ML;
using ML.JobPrediction.Core;
using ML.JobPrediction.Core.Models;
using System.IO;

namespace ML.JobPrediction.Blazor
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRazorPages();
            services.AddServerSideBlazor();

            services.AddSingleton<MLContext>();
            services.AddTransient<JobPredictionTrainingService>();

            // https://docs.microsoft.com/en-us/dotnet/machine-learning/how-to-guides/machine-learning-model-predictions-ml-net#multiple-predictions-predictionenginepool
            // Creating prediction engine is expensive and not thread safe. PredictionEnginePool is taking care of that problem.
            // Check Console application for simpler setup.
            string path = Path.GetFullPath(@"..\model.zip");
            services
                .AddPredictionEnginePool<Job, JobPredictionModel>()
                // Load model from file generated by the console application.
                .FromFile("Model.zip");

            services.AddTransient<JobPredictionLabelService>(
                ctx =>
                {
                    // User prediction engine pool for thread safe operations.
                    var predictionEnginePool = ctx.GetService<PredictionEnginePool<Job, JobPredictionModel>>();
                    return new JobPredictionLabelService(predictionEnginePool);
                });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(
            IApplicationBuilder app,
            IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Error");
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapBlazorHub();
                endpoints.MapFallbackToPage("/_Host");
            });
        }
    }
}
